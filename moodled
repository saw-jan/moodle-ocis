#!/bin/bash

export MOODLE_EXTRA_HOST=host.docker.internal

# ocis config
SKIP_OCIS=false
OCIS_CERTS_DIR=$PWD/ocis/certs
OCIS_CERTS_FILE=""

export MOODLE_DOCKER_WWWROOT=$PWD/moodle
export MOODLE_DOCKER_DB=pgsql
export MOODLE_DOCKER_PHP_VERSION=8.1
export MOODLE_DOCKER_WEB_HOST=$MOODLE_EXTRA_HOST
export MOODLE_DOCKER_WEB_PORT=8000
export MOODLE_DOCKER_SELENIUM_VNC_PORT=5900
export MOODLE_DOCKER_BROWSER=chrome
export MOODLE_DOCKER_BEHAT_WEB_PORT=8001

MOODLE_DOCKER_DIR=$PWD/moodle-docker
MOODLE_BRANCH=MOODLE_402_STABLE

MOODLE_COMPOSE_CMD=$MOODLE_DOCKER_DIR/bin/moodle-docker-compose
MOODLE_DB_WAIT_CMD=$MOODLE_DOCKER_DIR/bin/moodle-docker-wait-for-db

CMD=""

# check docker compose version
# REQUIRED: >=2.19
function checkDockerComposeVersion() {
  docker_compose_version=$(docker compose version --short)
  major=$(echo "$docker_compose_version" | cut -d. -f1)
  minor=$(echo "$docker_compose_version" | cut -d. -f2)
  if [ "$major" != "2" ] || [ "$minor" -lt "19" ]; then
    echo "[ERR] docker compose >=2.19 is REQUIRED, but found $docker_compose_version"
    exit 1
  fi
}

# check extra hosts
function checkExtraHost() {
  match=$(grep "$1" /etc/hosts)
  if [ "$match" == "" ] || echo "$match" | grep -q '#'; then
    echo "Adding '$1' to /etc/hosts"
    echo -e "127.0.0.1	$1" | sudo tee -a /etc/hosts >/dev/null
  fi
}

# moodle init
function init() {
  if [ ! -d "$MOODLE_DOCKER_WWWROOT" ]; then
    git clone https://github.com/moodle/moodle.git --branch "$MOODLE_BRANCH" --single-branch --depth=1
    cd moodle/repository/ || exit
    git clone https://github.com/owncloud/moodle-repository_ocis.git ocis
    cd ../../ || exit
  fi
  if [ ! -d "$MOODLE_DOCKER_DIR" ]; then
    git clone https://github.com/moodlehq/moodle-docker.git
  fi
  if [ ! -f "$MOODLE_DOCKER_WWWROOT/config.php" ]; then
    cp "$MOODLE_DOCKER_DIR"/config.docker-template.php "$MOODLE_DOCKER_WWWROOT"/config.php
    sed -i 's/"http:\/\/{$host}";/"https:\/\/{$host}";\n\t$CFG->sslproxy = true;/g' "$MOODLE_DOCKER_WWWROOT"/config.php
    sed -i "s/http:\/\/webserver/https:\/\/$MOODLE_EXTRA_HOST:$MOODLE_DOCKER_BEHAT_WEB_PORT/g" "$MOODLE_DOCKER_WWWROOT"/config.php
  fi

  if [ ! -f "$MOODLE_DOCKER_DIR/local.yml" ]; then
    cat >"$MOODLE_DOCKER_DIR/local.yml" <<EOF
services:
  webserver:
    labels:
      traefik.enable: true
      traefik.http.routers.webserver.tls: true
      traefik.http.routers.webserver.rule: Host(\`$MOODLE_EXTRA_HOST\`)
      traefik.http.routers.webserver.entrypoints: websecure
      traefik.http.services.webserver.loadbalancer.server.port: 80
    ports: !reset [] # reset port mapping
    extra_hosts:
      - $MOODLE_EXTRA_HOST:host-gateway
    environment:
      MOODLE_DISABLE_CURL_SECURITY: true
      MOODLE_OCIS_URL: https://$MOODLE_EXTRA_HOST:9200
      MOODLE_OCIS_CLIENT_ID: sdk
      MOODLE_OCIS_CLIENT_SECRET: UBntmLjC2yYCeHwsyj73Uwo9TAaecAetRwMw0xYcvNL9yRdLSUi0hUAHfvCHFeFh

  selenium:
    extra_hosts:
      - $MOODLE_EXTRA_HOST:host-gateway

  traefik:
    image: traefik:v2.9.1
    command:
      - '--pilot.dashboard=false'
      - '--log.level=ERROR'
      - '--api.dashboard=true'
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedbydefault=false'
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--entrypoints.websecure.http.middlewares=https_config@docker'
      - '--entrypoints.websecure.http.tls.options=default'
    labels:
      traefik.enable: true
      traefik.http.routers.http_catchall.middlewares: https_config
      traefik.http.middlewares.https_config.headers.sslRedirect: true
    ports:
      - 8000:443
      - 8001:443 # webserver port for behat tests
      - 8080:8080 # traefik dashboard
    extra_hosts:
      - $MOODLE_EXTRA_HOST:host-gateway
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
EOF
  fi
}

# pull images
# early exit if we are shutting down
function pull() {
  docker compose -f ocis/ocis.yml pull
  "$MOODLE_COMPOSE_CMD" pull
}

# shutdown services
function down() {
  docker compose -f ocis/ocis.yml down -v
  "$MOODLE_COMPOSE_CMD" down -v
}

function startOcis() {
  echo "Starting ocis server..."

  # check ocis certs
  if [ ! -f "$OCIS_CERTS_DIR"/ocis.crt ] || [ ! -f "$OCIS_CERTS_DIR"/ocis.pem ]; then
    rm -rf "$OCIS_CERTS_DIR"
    mkdir -p "$OCIS_CERTS_DIR"
    openssl req -x509 -newkey rsa:2048 -keyout "$OCIS_CERTS_DIR"/ocis.pem -out "$OCIS_CERTS_DIR"/ocis.crt -nodes -days 365 -subj "/CN=$MOODLE_EXTRA_HOST"
  fi

  OCIS_CERTS_FILE="$OCIS_CERTS_DIR"/ocis.crt

  # configure ocis idp
  OCIS_IDP_CONFIG=ocis/idp.yaml
  cp ocis/idp.yaml.example "$OCIS_IDP_CONFIG"
  sed -i "s/https:\/\/localhost/https:\/\/$MOODLE_EXTRA_HOST/g" "$OCIS_IDP_CONFIG"
  sed -i "s/moodle_host/$MOODLE_DOCKER_WEB_HOST/g" "$OCIS_IDP_CONFIG"
  sed -i "s/moodle_port/$MOODLE_DOCKER_WEB_PORT/g" "$OCIS_IDP_CONFIG"
  sed -i "s/moodle_behat_port/$MOODLE_DOCKER_BEHAT_WEB_PORT/g" "$OCIS_IDP_CONFIG"
  # start ocis
  docker compose -f ocis/ocis.yml up -d
  timeout=30
  start_time=$(date +%s)
  while [ "$(curl -sk https://$MOODLE_EXTRA_HOST:9200/ocs/v1.php/cloud/capabilities -w %\{http_code\} -o /dev/null)" != "200" ]; do
    curr_time=$(date +%s)
    elapsed_time=$(($curr_time - $start_time))
    if [ $elapsed_time -gt $timeout ]; then
      echo "[ERR] ocis was not ready after $timeout seconds"
      exit 1
    fi
    sleep 1
  done
}

function installMoodle() {
  if [ "$OCIS_CERTS_FILE" == "" ]; then
    echo -e "\e[31m[ERR] ocis cert file is required\e[0m"
    echo -e "CMD:  \e[36mbash moodled install --ocis-cert <cert-file-path>\e[0m"
    exit 1
  fi

  if [ -f "$OCIS_CERTS_FILE" ]; then
    "$MOODLE_COMPOSE_CMD" cp "$OCIS_CERTS_FILE" webserver:/usr/local/share/ca-certificates/
    "$MOODLE_COMPOSE_CMD" exec webserver update-ca-certificates
  else
    echo -e "\e[31m[ERR] ocis cert file not found:\e[0m $OCIS_CERTS_FILE"
    exit 1
  fi

  echo "Installing moodle..."
  "$MOODLE_DB_WAIT_CMD"
  "$MOODLE_COMPOSE_CMD" exec webserver \
    php admin/cli/install_database.php \
    --agree-license \
    --fullname="Docker moodle" \
    --shortname="docker_moodle" \
    --summary="Docker moodle site" \
    --adminpass="admin" \
    --adminemail="admin@example.com"

  # configure HTTP security
  "$MOODLE_COMPOSE_CMD" exec webserver php admin/cli/cfg.php --name=curlsecurityblockedhosts --set=""
  "$MOODLE_COMPOSE_CMD" exec webserver php admin/cli/cfg.php --name=curlsecurityallowedport --set="9200"

  # init behat tests
  # uncomment the following line if you want to run behat tests
  "$MOODLE_COMPOSE_CMD" exec webserver php admin/tool/behat/cli/init.php
}

function help() {
  echo -e "Usage: \e[32m$0\e[0m \e[36m<COMMAND>\e[0m \e[93m[OPTION]\e[0m"
  echo -e "  -h, --help      show help"
  echo -e "  \e[36mup\e[0m              start all services"
  echo -e "    \e[93m-f, --fresh\e[0m   start with fresh config.php and local.yml"
  echo -e "    \e[93m--skip-ocis\e[0m   do not start ocis service"
  echo -e "  \e[36minstall\e[0m         install moodle"
  echo -e "    \e[93m--ocis-cert\e[0m   path to ocis cert file"
  echo -e "  \e[36mpull\e[0m            pull docker images"
  echo -e "  \e[36mdown\e[0m            shutdown services"
}

# command options
while [ $# -gt 0 ]; do
  case "$1" in
  -h | --help)
    help
    exit 0
    ;;
  -f | --fresh)
    rm -rf "$MOODLE_DOCKER_WWWROOT/config.php"
    rm -rf "$MOODLE_DOCKER_DIR/local.yml"
    shift
    ;;
  --skip-ocis)
    SKIP_OCIS=true
    shift
    ;;
  --ocis-cert)
    OCIS_CERTS_FILE="$2"
    shift
    shift
    ;;
  up)
    CMD="up"
    shift
    ;;
  install)
    CMD="install"
    shift
    ;;
  pull)
    pull
    exit 0
    ;;
  down)
    down
    exit 0
    ;;
  *)
    echo "Unknown option: $1"
    help
    exit 1
    ;;
  esac
done

if [ "$CMD" == "install" ]; then
  installMoodle
  exit 0
fi

checkDockerComposeVersion
checkExtraHost $MOODLE_EXTRA_HOST

if [ "$CMD" == "up" ]; then
  # initialize moodle repos
  init
  # cleanup previous run
  down

  # start moodle services
  "$MOODLE_COMPOSE_CMD" up -d

  if [ "$SKIP_OCIS" == "true" ]; then
    echo -e "\nWith \e[93m--skip-ocis\e[0m option, you need to start ocis service manually"
    echo "After ocis is ready, run this command to install moodle:"
    echo -e "  \e[36mbash moodled install --ocis-cert <cert-file-path>\e[0m"
    exit 0
  fi

  # run ocis server
  startOcis
  # install moodle
  installMoodle
fi

if [ "$1" == "" ]; then
  help
fi
